# Reference: https://istio.io/latest/blog/2020/dns-proxy/#external-tcp-services-without-vips - DNS explanation - smart DNS Proxy and nulti-cluster setup, check ndots
# Reference: https://github.com/istio/istio/issues/42238
# Reference: envoy dynamic forward proxy : https://github.com/istio/istio/issues/15778
# https://github.com/istio/istio.io/issues/14126
# https://istio.io/latest/blog/2023/egress-sni/ <--- MOST IMPORTANT
# Understad TLS config: https://istio.io/latest/docs/ops/configuration/traffic-management/tls-configuration/
# https://istio.io/latest/docs/tasks/traffic-management/egress/egress-gateway/#egress-gateway-for-http-traffic

# PeerAuthentication is used to configure what type of mTLS traffic the sidecar will accept.
# DestinationRule is used to configure what type of TLS traffic the sidecar will send.
# MOST IMPORTANT: https://gist.github.com/yangminzhu/2123c6614825aeadba38279110450b62
# MOST IMPORTANT: https://www.bookstack.cn/read/istio-1.11.0-en/d0bd7ceab5fb9bdd.md

#Wildcard configuration for arbitrary domains
# The configuration in the previous section worked because all the \.wikipedia.org sites can be served by any one of the wikipedia.org servers. 
# However, this is not always the case. For example, you may want to configure egress control for access to more general wildcard domains like `*.com or *.org`.


apiVersion: v1
kind: ConfigMap
metadata:
  name: bash-script
data:
  bash.sh: |
    #!/bin/bash
    apt-get update
    apt-get install -y curl wget dnsutils net-tools iputils-ping telnet netcat-traditional gpg vim
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ubuntu-tls-test
  labels:
    app: ubuntu
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      istio: egressgateway
  strategy: {}
  template:
    metadata:
      labels:
        app: ubuntu
        istio: egressgateway
        sidecar.istio.io/inject: "true"
    spec:
      containers:
      - image: ubuntu:24.04
        name: ubuntu
        command: ["/bin/sleep", "3650d"]
        resources:
          limits:
            cpu: "1"
            memory: "500Mi"
          requests:
            cpu: "0.5"
            memory: "256Mi"
        volumeMounts:
          - mountPath: /data
            name: bash-script
      volumes:
      - name: bash-script
        configMap:
          name: bash-script
          defaultMode: 0777
---
# New k8s cluster service to put egressgateway into the Service Registry,
# so application sidecars can route traffic towards it within the mesh.
# apiVersion: v1
# kind: Service
# metadata:
#   name: istio-egressgateway
#   namespace: istio-egress
# spec:
#   type: ClusterIP
#   selector:
#     istio: egressgateway
#   ports:
#   - port: 443
#     name: tls-egress
#     targetPort: 8443
# ---
# Put the remote targets into the Service Registry
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: wildcard-wikipedia
  namespace: default
spec:
  hosts:
  - "*.wikipedia.org"
  ports:
  - number: 443
    name: tls
    protocol: TLS
  location: MESH_EXTERNAL

---
# VirtualService that will instruct sidecars in the mesh to route the outgoing
# traffic to the egress gateway Service if the SNI target hostname matches
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: direct-wildcard-through-egress-gateway
  namespace: default
spec:
  hosts:
  - "*.wikipedia.org"
  gateways:
  - mesh
  - istio-egress/wildcard-gateway
  tls:
  - match:
    - gateways:
      - mesh
      port: 443
      sniHosts:
      - "*.wikipedia.org"
    route:
    - destination:
        host: istio-egressgateway.istio-egress.svc.cluster.local
        subset: wildcard
# Dummy routing instruction. If omitted, no reference will point to the Gateway
# definition, and istiod will optimise the whole new listener out.
  tcp:
  - match:
    - gateways:
      - istio-egress/wildcard-gateway
      port: 8443
    route:
    - destination:
        host: "dummy.local"
      weight: 100
---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: wildcard-wikipedia
  namespace: default
spec:
  host: istio-egressgateway.istio-egress.svc.cluster.local
  subsets:
  - name: wildcard
  trafficPolicy:
    # tls:
    #   mode: ISTIO_MUTUAL
    #   sni: "*.wikipedia.org"
    portLevelSettings:
    - port:
        number: 443
      tls:
        mode: ISTIO_MUTUAL
        sni: "*.wikipedia.org"    # This is the SNI value that the sidecar will use to match the DestinationRule and forward this traffic to the egress gateway.
---
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: wildcard-gateway
  namespace: istio-egress
spec:
  selector:
    istio: egressgateway
  servers:
  - port:
      number: 8443      # use other than SNI forward proxy port_value 443 
      name: tls-egress
      protocol: TLS
    hosts:
    - "*.wikipedia.org"
    tls:
      mode: ISTIO_MUTUAL
---
# And finally, the configuration of the SNI forwarder,
# it's internal listener, and the patch to the original Gateway listener to route everything into the SNI forwarder.
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: sni-magic
  namespace: istio-egress
spec:
  configPatches:
  - applyTo: CLUSTER
    match:
      context: GATEWAY
    patch:
      operation: ADD
      value:
        name: sni_cluster
        load_assignment:
          cluster_name: sni_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  envoy_internal_address:
                    server_listener_name: sni_listener
  - applyTo: CLUSTER
    match:
      context: GATEWAY
    patch:
      operation: ADD
      value:
        name: dynamic_forward_proxy_cluster
        lb_policy: CLUSTER_PROVIDED
        cluster_type:
          name: envoy.clusters.dynamic_forward_proxy
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig
            dns_cache_config:
              name: dynamic_forward_proxy_cache_config
              dns_lookup_family: V4_ONLY

  - applyTo: LISTENER
    match:
      context: GATEWAY
    patch:
      operation: ADD
      value:
        name: sni_listener
        internal_listener: {}
        listener_filters:
        - name: envoy.filters.listener.tls_inspector
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector

        filter_chains:
        - filter_chain_match:
            server_names:
            - "*.wikipedia.org"
          filters:
            - name: envoy.filters.network.sni_dynamic_forward_proxy
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.sni_dynamic_forward_proxy.v3.FilterConfig
                port_value: 443
                dns_cache_config:
                  name: dynamic_forward_proxy_cache_config
                  dns_lookup_family: V4_ONLY
            - name: envoy.tcp_proxy
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: tcp
                cluster: dynamic_forward_proxy_cluster
                access_log:
                - name: envoy.access_loggers.file
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                    path: "/dev/stdout"
                    log_format:
                      text_format_source:
                        inline_string: '[%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%
                          %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %RESPONSE_CODE_DETAILS% %CONNECTION_TERMINATION_DETAILS%
                          "%UPSTREAM_TRANSPORT_FAILURE_REASON%" %BYTES_RECEIVED% %BYTES_SENT% %DURATION%
                          %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%"
                          "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%" %UPSTREAM_CLUSTER%
                          %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_REMOTE_ADDRESS%
                          %REQUESTED_SERVER_NAME% %ROUTE_NAME%

                          '
  - applyTo: NETWORK_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.tcp_proxy"
    patch:
      operation: MERGE
      value:
        name: envoy.tcp_proxy
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
          stat_prefix: tcp
          cluster: sni_cluster
