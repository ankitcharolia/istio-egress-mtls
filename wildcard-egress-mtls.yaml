# Reference: https://istio.io/latest/blog/2020/dns-proxy/#external-tcp-services-without-vips - DNS explanation - smart DNS Proxy and nulti-cluster setup, check ndots
# Reference: https://github.com/istio/istio/issues/42238
# https://github.com/istio/istio.io/issues/14126
# https://istio.io/latest/blog/2023/egress-sni/ <--- MOST IMPORTANT
# Understad TLS config: https://istio.io/latest/docs/ops/configuration/traffic-management/tls-configuration/
# https://istio.io/latest/docs/tasks/traffic-management/egress/egress-gateway/#egress-gateway-for-http-traffic
# PeerAuthentication is used to configure what type of mTLS traffic the sidecar will accept.
# DestinationRule is used to configure what type of TLS traffic the sidecar will send.
# MOST IMPORTANT: https://gist.github.com/yangminzhu/2123c6614825aeadba38279110450b62
# MOST IMPORTANT: https://www.bookstack.cn/read/istio-1.11.0-en/d0bd7ceab5fb9bdd.md

# The configuration for accessing a wildcard host via an egress gateway depends on whether or not the set of wildcard domains are served by a single common host.
# This is the case for *.wikipedia.org.  All of the language-specific sites are served by every one of the wikipedia.org servers. 
# You can route the traffic to an IP of any *.wikipedia.org site, including www.wikipedia.org, and it will manage to serve any specific site.

apiVersion: v1
kind: ConfigMap
metadata:
  name: bash-script
data:
  bash.sh: |
    #!/bin/bash
    apt-get update
    apt-get install -y curl wget dnsutils net-tools iputils-ping telnet netcat-traditional gpg vim
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ubuntu-tls-test
  labels:
    app: ubuntu
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      istio: egressgateway
  strategy: {}
  template:
    metadata:
      labels:
        app: ubuntu
        istio: egressgateway
        sidecar.istio.io/inject: "true"
    spec:
      containers:
      - image: ubuntu:24.04
        name: ubuntu
        command: ["/bin/sleep", "3650d"]
        resources:
          limits:
            cpu: "1"
            memory: "500Mi"
          requests:
            cpu: "0.5"
            memory: "256Mi"
        volumeMounts:
          - mountPath: /data
            name: bash-script
      volumes:
      - name: bash-script
        configMap:
          name: bash-script
          defaultMode: 0777
---
# Put the remote targets into the Service Registry
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: wildcard-wikipedia
  namespace: default
spec:
  hosts:
  - "*.wikipedia.org"
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  location: MESH_EXTERNAL
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: direct-wildcard-through-egress-gateway
  namespace: default
spec:
  hosts:
  - "*.wikipedia.org"
  gateways:
  - mesh
  - istio-egress/wildcard-gateway
  tls:
  - match:
    - gateways:
      - mesh
      port: 443
      sniHosts:
      - "*.wikipedia.org"
    route:
    - destination:
        host: istio-egressgateway.istio-egress.svc.cluster.local
        subset: wildcard
        port:
          number: 443
      weight: 100
  - match:
    - gateways:
      - istio-egress/wildcard-gateway
      port: 443
      sniHosts:
      - "*.wikipedia.org"
    route:
    - destination:
        host: www.wikipedia.org
        port:
          number: 443
      weight: 100
---
# Gateway is configured with TLS PASSTHROUGH while the DestinationRule configures TLS origination, 
# you will end up with double encryption. This works, but is often not the desired behavior.
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: wildcard-wikipedia
  namespace: default
spec:
  host: istio-egressgateway.istio-egress.svc.cluster.local
  subsets:
  - name: wildcard
---
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: wildcard-gateway
  namespace: istio-egress
spec:
  selector:
    istio: egressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - "*.wikipedia.org"
    tls:
      mode: PASSTHROUGH

---
# Create a ServiceEntry for the destination server, www.wikipedia.org.
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: www-wikipedia
spec:
  hosts:
  - www.wikipedia.org
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  resolution: DNS
